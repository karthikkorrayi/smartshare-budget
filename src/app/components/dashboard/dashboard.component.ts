import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ChartConfiguration } from 'chart.js';
import { StorageService } from '../../services/storage.service';
import { AiPlannerService } from '../../services/ai-planner.service';
import { BudgetPlan } from '../../models';
import * as XLSX from 'xlsx';

import { MatToolbarModule } from '@angular/material/toolbar';
import { MatCardModule }    from '@angular/material/card';
import { MatButtonModule }  from '@angular/material/button';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatSelectModule } from '@angular/material/select';
import { NgxEchartsDirective } from 'ngx-echarts';

@Component({
  selector: 'app-dashboard',
  templateUrl: './dashboard.component.html',
  styleUrls: ['./dashboard.component.scss'],
  standalone: true,
  imports: [CommonModule, MatCardModule, MatButtonModule, MatFormFieldModule, MatSelectModule, NgxEchartsDirective],
})
export class DashboardComponent implements OnInit {
  plans: BudgetPlan[] = [];
  selected?: BudgetPlan;
  tips: string[] = [];
  pieOptions: any; barOptions: any;

  // Chart.js doughnut config
  // doughnutData?: ChartConfiguration<'doughnut'>['data'];
  // barData?: ChartConfiguration<'bar'>['data'];

  constructor(private store: StorageService, private ai: AiPlannerService) {}

  ngOnInit() {
    this.plans = this.store.all();
    if (this.plans.length) 
      this.onSelect(this.plans[0]); 
  }

  // pieOptions: any;
  // barOptions: any;

  onSelect(p?: BudgetPlan) {
    if (!p) return;
    this.selected = p;
    this.tips = this.ai.tips(p);
    const c = p.categories;

    this.pieOptions = {
      tooltip: { trigger: 'item' },
      series: [{
        type: 'pie',
        radius: '60%',
        data: [
          { name: 'House', value: c.house },
          { name: 'Loan', value: c.loan },
          { name: 'Personal', value: c.personal },
          { name: 'Trip', value: c.trip },
          { name: 'Others', value: c.others },
          { name: 'Savings', value: c.savings },
        ]
      }]
    };

    this.barOptions = {
      tooltip: { trigger: 'axis' },
      xAxis: { type: 'category', data: ['House','Loan','Personal','Trip','Others','Savings'] },
      yAxis: { type: 'value' },
      series: [{ type: 'bar', data: [c.house, c.loan, c.personal, c.trip, c.others, c.savings] }]
    };
  }

  onSelectById(id: string) {
    const p = this.plans.find(plan => plan.id === id);
    if (p) this.onSelect(p);
  }

  exportExcel() {
    if (!this.selected) return;
    const p = this.selected;
    const rows = [
      { Category: 'House', Amount: p.categories.house },
      { Category: 'Loan', Amount: p.categories.loan },
      { Category: 'Personal', Amount: p.categories.personal },
      { Category: 'Trip', Amount: p.categories.trip },
      { Category: 'Others', Amount: p.categories.others },
      { Category: 'Savings', Amount: p.categories.savings },
      { Category: 'Income', Amount: p.income },
    ];

    const ws = XLSX.utils.json_to_sheet(rows);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Plan');

    // Add a second sheet for metadata
    const meta = [[
      'Month', p.month,
      'Priorities', p.priorities.join(', '),
      'Generated By AI', p.generatedByAI ? 'Yes' : 'No'
    ]];
    const ws2 = XLSX.utils.aoa_to_sheet(meta);
    XLSX.utils.book_append_sheet(wb, ws2, 'Meta');

    XLSX.writeFile(wb, `BudgetPlan_${p.month}.xlsx`);
  }

  // deleteSelected() {
  //   if (!this.selected) return;
  //   const id = this.selected.id;
  //   // remove from storage
  //   const remaining = this.plans.filter(x => x.id !== id);
  //   localStorage.setItem('smartshare_plans_v1', JSON.stringify(remaining));
  //   // update UI
  //   this.plans = remaining;
  //   this.selected = this.plans[0];
  //   if (this.selected) this.onSelect(this.selected);
  // }
}